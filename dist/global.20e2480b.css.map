{"version":3,"sources":["style\\abstracts\\breakpoints.scss","style\\global.scss","style\\abstracts\\variables.scss"],"names":[],"mappings":"AA2UE;AAAA;AAAA;AAAA;AAAA;ACzUF;EACI;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGJ;EACI;EACA;EACA,OCZI;;ADcJ;EACI;;AD6FJ;ECnGJ;IAUQ;;;;AAIR;EACI;EACA,YC3BQ;;;AD8BZ;EACI;EACA;;;AAIJ;EACI;;ADyEA;EC1EJ;IAIQ;;;ADsEJ;EC1EJ;IAQQ;;;;ADkEJ;EC9DJ;IAEQ;;;;AAIR;EACI;EACA;;;AAGJ;EACI;EACA;;;AAGJ;EACI;EACA;EACA;EACA,OChEK;EDiEL;EACA;EACA;EACA;EACA,kBCtEI;EDuEJ;EACA;;AAEA;EACI,OC3EA;ED4EA,kBCzEM;ED0EN;;;AAIR;EACI;EACA,OCpFI;EDqFJ;;AAEA;EACI,OCpFM;;;ADwFd;EACI;;ADeA;EChBJ;IAGQ;IACA;;;;AAIR;EACI;EACA;EACA;EACA;EACA;;ADGA;ECRJ;IAQQ;;;;AAIR;EACI;;ADLA;ECIJ;IAIQ;;;;AAKR;EACI;EACA;;ADfA;ECaJ;IAKQ;IACA;;;AAGJ;EACI;EACA;EACA;EACA;EACA;EACA,kBCxIA;;AD2IJ;EACI,kBC3IA;;;ADgJR;EACI","file":"global.20e2480b.css","sourceRoot":"..\\src","sourcesContent":["\r\n$breakpoints: (\r\n    \"phone\": 520px,\r\n    \"tablet\": 1024px,\r\n    \"desktop\": 1440px,\r\n    \"LGdesktop\": 1920px\r\n  ) !default;\r\n\r\n  ///\r\n  /// Creates a list of static expressions or media types\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @example scss - Creates a single media type (screen)\r\n  ///  $media-expressions: ('screen': 'screen');\r\n  ///\r\n  /// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n  ///  $media-expressions: (\r\n  ///\t\t'retina2x': (\r\n  ///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n  ///\t\t\t'(min-resolution: 192dpi)'\r\n  ///\t\t)\r\n  ///\t);\r\n  ///\r\n  $media-expressions: (\r\n    \"screen\": \"screen\",\r\n    \"print\": \"print\",\r\n    \"handheld\": \"handheld\",\r\n    \"retina2x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 2)\",\r\n      \"(min-resolution: 192dpi)\"\r\n    ),\r\n    \"retina3x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 3)\",\r\n      \"(min-resolution: 350dpi)\"\r\n    )\r\n  ) !default;\r\n\r\n  ///\r\n  /// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @example scss - Interval for pixels is defined as `1` by default\r\n  ///  @include media(\">128px\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 129px) {}\r\n  ///\r\n  /// @example scss - Interval for ems is defined as `0.01` by default\r\n  ///  @include media(\">20em\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 20.01em) {}\r\n  ///\r\n  /// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n  ///  @include media(\">2.0rem\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 2.1rem) {}\r\n  ///\r\n  $unit-intervals: (\r\n    \"px\": 1,\r\n    \"em\": 0.01,\r\n    \"rem\": 0.1\r\n  ) !default;\r\n  ///\r\n  /// Generates a media query based on a list of conditions\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {List}   $conditions  - Media query conditions\r\n  ///\r\n  /// @example scss - With a single set breakpoint\r\n  ///  @include media(\">phone\") { }\r\n  ///\r\n  /// @example scss - With two set breakpoints\r\n  ///  @include media(\">phone\", \"<=tablet\") { }\r\n  ///\r\n  /// @example scss - With custom values\r\n  ///  @include media(\">=358px\", \"<850px\") { }\r\n  ///\r\n  /// @example scss - With set breakpoints with custom values\r\n  ///  @include media(\">desktop\", \"<=1350px\") { }\r\n  ///\r\n  /// @example scss - With a static expression\r\n  ///  @include media(\"retina2x\") { }\r\n  ///\r\n  /// @example scss - Mixing everything\r\n  ///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n  ///\r\n  @mixin media($conditions...) {\r\n    @for $i from 1 through length($conditions) {\r\n      $conditions: set-nth(\r\n        $conditions,\r\n        $i,\r\n        parse-expression(nth($conditions, $i))\r\n      );\r\n    }\r\n\r\n    $branches: get-query-branches($conditions);\r\n    $query: \"\";\r\n\r\n    @each $branch in $branches {\r\n      @if (str-length($query) != 0) {\r\n        $query: $query + \", \";\r\n      }\r\n\r\n      $query: $query + $branch;\r\n    }\r\n\r\n    @media #{$query} {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  ///\r\n  /// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {List}   $expressions  - list of expressions\r\n  ///\r\n  /// @throws `$expression` is not a valid expression\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function get-query-branches($expressions) {\r\n    $result: \"\";\r\n    $has-groups: false;\r\n\r\n    // Getting initial snapshot and looking for groups\r\n    @each $expression in $expressions {\r\n      @if (str-length($result) != 0) {\r\n        $result: $result + \" and \";\r\n      }\r\n\r\n      @if (type-of($expression) == \"string\") {\r\n        $result: $result + $expression;\r\n      } @else if (type-of($expression) == \"list\") {\r\n        $result: $result + nth($expression, 1);\r\n        $has-groups: true;\r\n      } @else {\r\n        @warn '#{$expression} is not a valid expression.';\r\n      }\r\n    }\r\n\r\n    // If we have groups, we have to create all possible combinations\r\n    @if $has-groups {\r\n      @each $expression in $expressions {\r\n        @if (type-of($expression) == \"list\") {\r\n          $first: nth($expression, 1);\r\n\r\n          @each $member in $expression {\r\n            @if ($member != $first) {\r\n              @each $partial in $result {\r\n                $result: join(\r\n                  $result,\r\n                  str-replace-first($first, $member, $partial)\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    @return $result;\r\n  }\r\n\r\n  ///\r\n  /// Parses a string to form a media query expression\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {String}   $expression  - expression (in string)\r\n  ///\r\n  /// @throws Expression with type `type-of($expression)` detected, string expected\r\n  /// @throws `$expression` is missing an operator\r\n  /// @throws Unknown unit: `$unit`\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function parse-expression($expression) {\r\n    $operator: \"\";\r\n    $value: \"\";\r\n    $element: \"\";\r\n    $result: \"\";\r\n    $is-width: true;\r\n\r\n    @if (type-of($expression) != \"string\") {\r\n      @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n    }\r\n\r\n    // Separating the operator from the rest of the expression\r\n    @if (str-slice($expression, 2, 2) == \"=\") {\r\n      $operator: str-slice($expression, 1, 2);\r\n      $value: str-slice($expression, 3);\r\n    } @else {\r\n      $operator: str-slice($expression, 1, 1);\r\n      $value: str-slice($expression, 2);\r\n    }\r\n\r\n    // Checking what type of expression we're dealing with\r\n    @if map-has-key($breakpoints, $value) {\r\n      $result: map-get($breakpoints, $value);\r\n    } @else if map-has-key($media-expressions, $expression) {\r\n      $result: map-get($media-expressions, $expression);\r\n      $is-width: false;\r\n    } @else {\r\n      $result: to-number($value);\r\n    }\r\n\r\n    @if ($is-width) {\r\n      $unit: unit($result);\r\n      $interval: 0;\r\n\r\n      @if (map-has-key($unit-intervals, $unit)) {\r\n        $interval: map-get($unit-intervals, $unit);\r\n      } @else {\r\n        @warn 'Unknown unit: #{$unit}';\r\n      }\r\n\r\n      @if ($operator == \">\") {\r\n        $element: \"(min-width: #{$result + $interval})\";\r\n      } @else if ($operator == \"<\") {\r\n        $element: \"(max-width: #{$result - $interval})\";\r\n      } @else if ($operator == \">=\") {\r\n        $element: \"(min-width: #{$result})\";\r\n      } @else if ($operator == \"<=\") {\r\n        $element: \"(max-width: #{$result})\";\r\n      } @else {\r\n        @warn '#{$expression} is missing an operator.';\r\n      }\r\n    } @else {\r\n      $element: $result;\r\n    }\r\n\r\n    @return $element;\r\n  }\r\n\r\n  ///\r\n  /// Replaces the first occurence of the string with the replacement string\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {String}   $search  - The value being searched for\r\n  /// @param {String}   $replace  - The replacement string\r\n  /// @param {String}   $subject  - The string being replaced on\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function str-replace-first($search, $replace, $subject) {\r\n    $search-start: str-index($subject, $search);\r\n\r\n    @if $search-start == null {\r\n      @return $subject;\r\n    }\r\n\r\n    $result: str-slice($subject, 0, $search-start - 1);\r\n    $result: $result + $replace;\r\n    $result: $result + str-slice($subject, $search-start + str-length($search));\r\n\r\n    @return $result;\r\n  }\r\n\r\n  ///\r\n  /// Casts a number to a string\r\n  ///\r\n  /// @author Hugo Giraudel\r\n  ///\r\n  /// @param {String}   $string  - Number to be parsed\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function to-number($string) {\r\n    // Matrices\r\n    $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n    $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n\r\n    // Result\r\n    $result: 0;\r\n    $divider: 0;\r\n    $minus: false;\r\n\r\n    // Looping through all characters\r\n    @for $i from 1 through str-length($string) {\r\n      $character: str-slice($string, $i, $i);\r\n      $index: index($strings, $character);\r\n\r\n      @if $character == \"-\" {\r\n        $minus: true;\r\n      } @else if $character == \".\" {\r\n        $divider: 1;\r\n      } @else {\r\n        @if type-of($index) != \"number\" {\r\n          $result: if($minus, $result * -1, $result);\r\n          @return _length($result, str-slice($string, $i));\r\n        }\r\n\r\n        $number: nth($numbers, $index);\r\n\r\n        @if $divider == 0 {\r\n          $result: $result * 10;\r\n        } @else {\r\n          // Move the decimal dot to the left\r\n          $divider: $divider * 10;\r\n          $number: $number / $divider;\r\n        }\r\n\r\n        $result: $result + $number;\r\n      }\r\n    }\r\n\r\n    @return if($minus, $result * -1, $result);\r\n  }\r\n\r\n  @function _length($number, $unit) {\r\n    $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n      \"vh\" \"vmin\" \"vmax\";\r\n    $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n    $index: index($strings, $unit);\r\n\r\n    @if type-of($index) != \"number\" {\r\n      @warn 'Unknown unit `#{$unit}`.';\r\n      @return false;\r\n    }\r\n\r\n    @return $number * nth($units, $index);\r\n  }\r\n\r\n  /**\r\n  *\r\n  * Testing\r\n  *\r\n  **/","@use \"./abstracts/\" as *;\r\n\r\n*, *:before, *:after {\r\n    overscroll-behavior: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -moz-box-sizing:border-box;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-family:'Courier New', Courier, monospace;\r\n    font-size: 16px;\r\n    color: $black;\r\n\r\n    &:focus-within {\r\n        scroll-behavior: smooth;\r\n    }\r\n\r\n    @include media(\"<=phone\"){\r\n        font-size: 0.7rem;\r\n    }\r\n}\r\n\r\nbody {\r\n    text-rendering: optimizeSpeed;\r\n    background: $backround;\r\n}\r\n\r\n.wrapper {\r\n    position: relative;\r\n    overflow: hidden;\r\n    // max-height: 100vh;\r\n}\r\n\r\nh1 {\r\n    font-size: 3rem;\r\n\r\n    @include media(\"<=tablet\") {\r\n        font-size: 2.5rem;\r\n    }\r\n\r\n    @include media(\"<=phone\") {\r\n        font-size: 2rem;\r\n    }\r\n}\r\n\r\nh2 {\r\n    @include media(\"<=phone\") {\r\n        font-size: 1.5rem;\r\n    }\r\n}\r\n\r\nimg {\r\n    max-width: 100%;\r\n    display: block;\r\n}\r\n\r\nul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.button {\r\n    cursor: pointer;\r\n    display: block;\r\n    padding: 0.75rem;\r\n    color: $purple;\r\n    font-size: 0.8rem;\r\n    letter-spacing: 1px;\r\n    word-wrap: none;\r\n    font-weight: 600;\r\n    background-color: $white;\r\n    border: 2px solid $purple;\r\n    transition: all 200ms ease-in-out;\r\n\r\n    &:hover {\r\n        color: $white;\r\n        background-color: $dark-purple;\r\n        border: 2px solid $dark-purple;\r\n    }\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n    color: $black;\r\n    transition: all 200ms ease-in-out;\r\n\r\n    &:hover {\r\n        color: $dark-purple;\r\n    }\r\n}\r\n\r\np {\r\n    font-size: 16px;\r\n    @include media(\"<=phone\"){\r\n        font-size: 12px;\r\n        line-height: 1.5rem;\r\n    }\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    padding: 2rem 2rem;\r\n    height: 100%;\r\n    overflow: hidden;\r\n\r\n    @include media(\"<=phone\") {\r\n        padding: 0;\r\n    }\r\n}\r\n\r\n.container-small {\r\n    margin: 2rem 6rem;\r\n\r\n    @include media(\"<=phone\") {\r\n        padding: 2rem 3rem;\r\n    }\r\n\r\n}\r\n\r\n.mobile-menu {\r\n    display: none;\r\n    z-index: 1;\r\n\r\n    @include media(\"<=tablet\") {\r\n        display: flex;\r\n        flex-flow: column;\r\n    }\r\n\r\n    .menu-line {\r\n        margin-block: 5px;\r\n        display: block;\r\n        width: 2rem;\r\n        height: 4px;\r\n        border-radius: 25px;\r\n        background-color: $black;\r\n    }\r\n\r\n    &.menu-open > .menu-line{\r\n        background-color: $white;\r\n    }\r\n}\r\n\r\n\r\n.prevent-scroll {\r\n    overflow-y: hidden;\r\n}\r\n\r\n.content-shift-fix {\r\n    // margin-right:17px;\r\n}","\r\n$backround: #f4f5f6;\r\n// $black: rgb(60, 60, 60);\r\n$black: #222222;\r\n$white: #f4f5f6;\r\n$purple: rgb(119, 52, 182);\r\n$purple-light: rgb(166, 109, 220);\r\n$dark-purple: rgb(88, 52, 108);\r\n"]}